{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.array.some.js","webpack:///./node_modules/core-js/modules/es.map.js","webpack:///./src/stages/012/View.vue?20e6","webpack:///./src/stages/012/Character.ts","webpack:///./src/stages/012/Field.ts","webpack:///./src/stages/012/View.vue?cb5b","webpack:///./src/stages/012/View.vue?1486","webpack:///./src/stages/012/View.vue","webpack:///./src/stages/012/View.vue?44d9"],"names":["$","$some","some","arrayMethodIsStrict","arrayMethodUsesToLength","STRICT_METHOD","USES_TO_LENGTH","target","proto","forced","callbackfn","this","arguments","length","undefined","collection","collectionStrong","module","exports","init","render","_vm","_h","$createElement","_c","_self","staticStyle","ref","_v","_s","fpsCounter","averageMs","toFixed","staticRenderFns","moveX","moveY","nextDirection","texture","textureOffset","routine","x","y","hitCircle","hitRect","animationFrame","_currentDirection","preUpdateInfo","animationStep","bodySprite","SortableSprite","baseTexture","character","anchor","set","shadowTexture","shadowSprite","from","alpha","debugCircle","lineStyle","drawCircle","debugRect","drawRect","width","height","value","syncTexture","offsetX","offsetY","currentDirection","frame","preUpdate","zOrder","position","KEY_CODE_LEFT","KEY_CODE_UP","KEY_CODE_RIGHT","KEY_CODE_DOWN","calcMoveXY","direction","speed","slantSpeed","pressedKeyCodeSet","has","mapChipData","mapData","horizontalGridNum","verticalGridNum","targetCharacter","characters","walls","textureMap","Map","textureList","use32bitIndex","sortableChildren","bgLayerContainer","layerContainer","SortableParticleContainer","uvs","vertices","tint","airLayerContainer","debugLayerContainer","visible","addChild","generateMap","on","rect","push","wallGraphic","clearMap","forEach","destroy","clear","gridY","gridYCount","Math","floor","imageheight","tileheight","gridX","gridXCount","imagewidth","tilewidth","clone","mapChipIndex","layerIndex","textureIndex","layers","data","addFrame","isTarget","addChildZ","chara","update","hitOtherCaracter","hitCharacter","hitDistanceRate","hitWall","hit","excessX","excessY","rightLimitX","leftLimitX","bottomLimitY","topLimitY","min","max","sortChildren","targetCircle","hitDistance","x1","y1","x2","y2","radius","sqrt","pow","targetRect","wall","hHit","left","right","vHit","top","bottom","flag","oldNow","performance","now","ms","counter","extend","pixiApp","field","Set","npc","isDebugMode","mounted","RESOLUTION","window","devicePixelRatio","SCALE_MODE","NEAREST","onkeydown","onKeyDown","onkeyup","onKeyUp","opt","autoDensity","ticker","maxFPS","minFPS","container","$refs","appendChild","view","bg","WHITE","stage","clearTextureCache","shared","reset","add","load","renderTexture","create","spriteMapChip","resources","renderer","sprite01","chara1","addCharacter","methods","event","keyCode","delta","checkPoint","onClickToggleDebugMode","setDebugMode","beforeDestroy","components","computed","props","component"],"mappings":"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","file":"js/chunk-bfe95c78.95c77655.js","sourcesContent":["'use strict';\nvar $ = require('../internals/export');\nvar $some = require('../internals/array-iteration').some;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar STRICT_METHOD = arrayMethodIsStrict('some');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('some');\n\n// `Array.prototype.some` method\n// https://tc39.es/ecma262/#sec-array.prototype.some\n$({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH }, {\n  some: function some(callbackfn /* , thisArg */) {\n    return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","'use strict';\nvar collection = require('../internals/collection');\nvar collectionStrong = require('../internals/collection-strong');\n\n// `Map` constructor\n// https://tc39.es/ecma262/#sec-map-objects\nmodule.exports = collection('Map', function (init) {\n  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };\n}, collectionStrong);\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"position\":\"relative\"}},[_c('div',{ref:\"pixi_area\",staticStyle:{\"width\":\"640px\",\"height\":\"480px\"}}),(true)?_c('div',{staticStyle:{\"position\":\"absolute\",\"left\":\"4px\",\"top\":\"4px\",\"color\":\"#fff\"}},[_vm._v(_vm._s((1000 / _vm.fpsCounter.averageMs).toFixed(2))+\" fps\")]):_vm._e()])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import * as PIXI from \"pixi.js\"\r\n\r\nimport { SortableSprite } from '@/stages/005/SortableSprite'\r\n\r\n// 次フレームで行動したい内容\r\nclass PreUpdateInfo {\r\n  constructor(\r\n    public moveX: number,\r\n    public moveY: number,\r\n    public nextDirection: number\r\n    ) {}\r\n}\r\n\r\n// キャラクター\r\nexport class Character {\r\n  public x: number = 0\r\n  public y: number = 0\r\n  public hitCircle: PIXI.Circle = new PIXI.Circle(0, 0, 12)\r\n  public hitRect: PIXI.Rectangle = new PIXI.Rectangle(-12, -12, 24, 24)\r\n  private animationFrame = 0\r\n  private _currentDirection = 2\r\n  public preUpdateInfo: PreUpdateInfo | null = null\r\n  public bodySprite!: SortableSprite\r\n  public shadowSprite!: PIXI.Sprite\r\n  public debugCircle!: PIXI.Graphics\r\n  public debugRect!: PIXI.Graphics\r\n  set currentDirection(value: number) {\r\n    this._currentDirection = value\r\n    this.syncTexture()\r\n  }\r\n  get currentDirection() {\r\n    return this._currentDirection\r\n  }\r\n  private animationStep = 0\r\n  constructor(texture: PIXI.Texture, private textureOffset: PIXI.Point, public routine: BaseRoutine) {\r\n    // 体\r\n    this.bodySprite = new SortableSprite()\r\n    this.bodySprite.texture = new PIXI.Texture(texture.baseTexture, new PIXI.Rectangle(textureOffset.x, textureOffset.y, 32, 64))\r\n    routine.character = this\r\n    this.bodySprite.anchor.set(0.5, 1)\r\n\r\n    // 影\r\n    const shadowTexture = new PIXI.Texture(texture.baseTexture, new PIXI.Rectangle(224, 0, 32, 32))\r\n    this.shadowSprite = PIXI.Sprite.from(shadowTexture)\r\n    this.shadowSprite.alpha = 0.5\r\n    this.shadowSprite.anchor.set(0.5, 0.5)\r\n\r\n    // 当たり判定\r\n    this.debugCircle = new PIXI.Graphics()\r\n    this.debugCircle.lineStyle(2, 0xFF5555, 1)\r\n    this.debugCircle.alpha = 0.7\r\n    this.debugCircle.drawCircle(0, 0, 11)\r\n    this.debugRect = new PIXI.Graphics()\r\n    this.debugRect.lineStyle(2, 0x5555FF, 1)\r\n    this.debugRect.alpha = 0.7\r\n    this.debugRect.drawRect(this.hitRect.x, this.hitRect.y, this.hitRect.width, this.hitRect.height)\r\n  }\r\n  private syncTexture() {\r\n    let offsetX = 0\r\n    let offsetY = 0\r\n    switch(this.currentDirection) {\r\n      case 1:\r\n        offsetX = 96\r\n        break;\r\n      case 2:\r\n        break;\r\n      case 3:\r\n        offsetX = 96\r\n        offsetY = 64\r\n        break;\r\n      case 4:\r\n        offsetY = 64\r\n        break;\r\n      case 6:\r\n        offsetY = 128\r\n        break;\r\n      case 7:\r\n        offsetX = 96\r\n        offsetY = 128\r\n        break;\r\n      case 8:\r\n        offsetY = 192\r\n        break;\r\n      case 9:\r\n        offsetX = 96\r\n        offsetY = 192\r\n        break;\r\n    }\r\n\r\n    offsetX += (this.animationStep === 3 ? 1 : this.animationStep) * 32\r\n    const frame = new PIXI.Rectangle(\r\n      this.textureOffset.x + offsetX,\r\n      this.textureOffset.y + offsetY,\r\n      32,\r\n      64\r\n    )\r\n    this.bodySprite.texture.frame = frame\r\n  }\r\n  public preUpdate() {\r\n    this.routine.preUpdate()\r\n  }\r\n  public update() {\r\n    ;[this.bodySprite.x, this.bodySprite.y] = [this.x, this.y + 8]\r\n    ;[this.shadowSprite.x, this.shadowSprite.y] = [this.x, this.y]\r\n    ;[this.hitCircle.x, this.hitCircle.y] = [this.x, this.y]\r\n    ;[this.debugCircle.x, this.debugCircle.y] = [this.x, this.y]\r\n    ;[this.hitRect.x, this.hitRect.y] = [this.x - 12, this.y - 12]\r\n    ;[this.debugRect.x, this.debugRect.y] = [this.x, this.y]\r\n    this.bodySprite.zOrder = this.bodySprite.position.y\r\n    ++this.animationFrame\r\n    if (this.animationFrame > 30) {\r\n      this.animationFrame = 0\r\n      this.animationStep = (this.animationStep + 1) % 4\r\n      this.syncTexture()\r\n    }\r\n  }\r\n}\r\n\r\n// ルーチン\r\nabstract class BaseRoutine {\r\n  public character!: Character\r\n  abstract preUpdate(): void\r\n}\r\n\r\nconst KEY_CODE_LEFT = 37\r\nconst KEY_CODE_UP = 38\r\nconst KEY_CODE_RIGHT = 39\r\nconst KEY_CODE_DOWN = 40\r\n\r\n// 方向とスピードからx,yの移動速度算出\r\nconst calcMoveXY = function(direction: number, speed: number): [number, number] {\r\n  const slantSpeed = speed * 0.7\r\n  switch (direction) {\r\n    case 1:\r\n      return [-slantSpeed, slantSpeed]\r\n    case 2:\r\n      return [0, speed]\r\n    case 3:\r\n      return [slantSpeed, slantSpeed]\r\n    case 4:\r\n      return [-speed, 0]\r\n    case 6:\r\n      return [speed, 0]\r\n    case 7:\r\n      return [-slantSpeed, -slantSpeed]\r\n    case 8:\r\n      return [0, -speed]\r\n    case 9:\r\n      return [slantSpeed, -slantSpeed]\r\n  }\r\n  return [0, 0]\r\n}\r\n\r\n// プレイヤー操作用ルーチン\r\nexport class PlayerRoutine extends BaseRoutine {\r\n  constructor(private pressedKeyCodeSet: Set<number>) {\r\n    super()\r\n  }\r\n\r\n  public preUpdate() {\r\n    let direction: number | null = null \r\n    // 向き取得\r\n    if (this.pressedKeyCodeSet.has(KEY_CODE_LEFT)) {\r\n      if (this.pressedKeyCodeSet.has(KEY_CODE_DOWN)) {\r\n        direction = 1\r\n      } else if (this.pressedKeyCodeSet.has(KEY_CODE_UP)) {\r\n        direction = 7\r\n      } else {\r\n        direction = 4\r\n      }\r\n    } else if (this.pressedKeyCodeSet.has(KEY_CODE_RIGHT)) {\r\n      if (this.pressedKeyCodeSet.has(KEY_CODE_DOWN)) {\r\n        direction = 3\r\n      } else if (this.pressedKeyCodeSet.has(KEY_CODE_UP)) {\r\n        direction = 9\r\n      } else {\r\n        direction = 6\r\n      }\r\n    } else if (this.pressedKeyCodeSet.has(KEY_CODE_UP)) {\r\n      direction = 8\r\n    } else if (this.pressedKeyCodeSet.has(KEY_CODE_DOWN)) {\r\n      direction = 2\r\n    }\r\n    // 向かせたり歩かせたり\r\n    if (direction != null) {\r\n      const [moveX, moveY] = calcMoveXY(direction, 5)\r\n      this.character.preUpdateInfo = new PreUpdateInfo(moveX, moveY, direction)\r\n    }\r\n  }\r\n}\r\n\r\n// うろうろルーチン\r\nexport class UroUroRoutine extends BaseRoutine {\r\n  constructor(\r\n    private isMoving = false,\r\n    private frameCountToWait: number = 0,\r\n    private frameCountToMove: number = 60) {\r\n    super()\r\n  }\r\n  preUpdate() {\r\n    // 移動中\r\n    if (this.isMoving) {\r\n      const [moveX, moveY] = calcMoveXY(this.character.currentDirection, 0.6)\r\n      this.character.preUpdateInfo = new PreUpdateInfo(moveX, moveY, this.character.currentDirection)\r\n      --this.frameCountToWait\r\n      if (this.frameCountToWait <= 0) {\r\n        this.frameCountToWait = 0\r\n        this.frameCountToMove = 60 + 30 * Math.floor(Math.random() * 3)\r\n        this.isMoving = false\r\n      }\r\n    }\r\n    // 待機中\r\n    else {\r\n      --this.frameCountToMove\r\n      if (this.frameCountToMove <= 0) {\r\n        this.frameCountToMove = 0\r\n        this.frameCountToWait = 60\r\n        const direction = [1, 2, 3, 4, 6, 7, 8, 9][Math.floor(Math.random() * 8)]\r\n        this.character.preUpdateInfo = new PreUpdateInfo(0, 0, direction)\r\n        this.isMoving = true\r\n      }\r\n    }\r\n  }\r\n}","import { Character } from '@/stages/012/Character'\r\nimport { SortableParticleContainer } from '@/stages/005/SortableParticleContainer'\r\nimport * as PIXI from \"pixi.js\"\r\nimport * as PIXITilemap from '@/pixi-tilemap/index'\r\n\r\nexport class Field extends PIXI.Container {\r\n  private bgLayerContainer!: PIXITilemap.CompositeRectTileLayer\r\n  private airLayerContainer!: PIXITilemap.CompositeRectTileLayer\r\n  private layerContainer!: SortableParticleContainer\r\n  private debugLayerContainer!: PIXI.Container\r\n  public horizontalGridNum = 200\r\n  public verticalGridNum = 200\r\n  private targetCharacter: Character | null = null\r\n  private characters: Array<Character> = []\r\n  private walls: Array<PIXI.Rectangle> = []\r\n  private textureMap: Map<string, PIXI.Texture> = new Map()\r\n  private textureList: Array<PIXI.Texture> = []\r\n  constructor(private texture: PIXI.Texture, private mapChipData: any, private mapData: any) {\r\n    super()\r\n\r\n    // 150,000チップ以上使えるようにする\r\n    PIXITilemap.Constant.use32bitIndex = true;\r\n\r\n    this.sortableChildren = true\r\n    this.bgLayerContainer = new PIXITilemap.CompositeRectTileLayer(0, [texture])\r\n    this.layerContainer = new SortableParticleContainer(20000, { uvs: true, vertices: true, tint: true })\r\n    this.airLayerContainer = new PIXITilemap.CompositeRectTileLayer(0, [texture])\r\n    this.debugLayerContainer = new PIXI.Container()\r\n    this.debugLayerContainer.visible = false\r\n    this.addChild(this.bgLayerContainer)\r\n    this.addChild(this.layerContainer)\r\n    this.addChild(this.airLayerContainer)\r\n    this.addChild(this.debugLayerContainer)\r\n\r\n    this.generateMap()\r\n    this.on('added', () => {\r\n      // 親に追加されたときになにかやるならここで\r\n    })\r\n  }\r\n  private addWall(rect: PIXI.Rectangle) {\r\n    this.walls.push(rect)\r\n    const wallGraphic = new PIXI.Graphics()\r\n    wallGraphic.lineStyle(2, 0x5555FF, 1)\r\n    wallGraphic.drawRect(rect.x + 1, rect.y + 1, rect.width - 2, rect.height - 2)\r\n    this.debugLayerContainer.addChild(wallGraphic)\r\n  }\r\n  public reloadMap(mapData: any) {\r\n    this.mapData = mapData\r\n    this.clearMap()\r\n    this.generateMap()\r\n  }\r\n  public clearMap() {\r\n    this.textureMap.forEach(value => value.destroy())\r\n    this.textureMap.clear()\r\n    this.bgLayerContainer.clear()\r\n    this.airLayerContainer.clear()\r\n    this.walls.length = 0\r\n  }\r\n  public generateMap() {\r\n    // まずは全てのチップをテクスチャ化\r\n    this.textureList.forEach(texture => texture.destroy())\r\n    this.textureList.length = 0\r\n\r\n    for (let gridY = 0, gridYCount = Math.floor(this.mapChipData.imageheight / this.mapChipData.tileheight); gridY < gridYCount; ++gridY) {\r\n      for (let gridX = 0, gridXCount = Math.floor(this.mapChipData.imagewidth / this.mapChipData.tilewidth); gridX < gridXCount; ++gridX) {\r\n        const texture = this.texture.clone()\r\n        texture.frame = new PIXI.Rectangle(\r\n          this.mapChipData.tilewidth * gridX,\r\n          this.mapChipData.tileheight * gridY,\r\n          this.mapChipData.tilewidth,\r\n          this.mapChipData.tileheight)\r\n        this.textureList.push(texture)\r\n      }\r\n    }\r\n    // チップを配置\r\n    {\r\n      this.horizontalGridNum = this.mapData.width\r\n      this.verticalGridNum = this.mapData.height\r\n      for (let gridY = 0; gridY < this.verticalGridNum; ++gridY) {\r\n        for (let gridX = 0; gridX < this.horizontalGridNum; ++gridX) {\r\n          const mapChipIndex = gridX + gridY * this.horizontalGridNum\r\n          // 下層、中層、上層地形\r\n          for (let layerIndex = 0; layerIndex < 3; ++layerIndex) {\r\n            const textureIndex = this.mapData.layers[layerIndex].data[mapChipIndex]\r\n            if (textureIndex > 0) {\r\n              this.bgLayerContainer.addFrame(this.textureList[textureIndex - 1], gridX * this.mapChipData.tilewidth, gridY * this.mapChipData.tileheight)\r\n            }\r\n          }\r\n          // 上空\r\n          {\r\n            const textureIndex = this.mapData.layers[3].data[mapChipIndex]\r\n            if (textureIndex > 0) {\r\n              this.airLayerContainer.addFrame(this.textureList[textureIndex - 1], gridX * this.mapChipData.tilewidth, gridY * this.mapChipData.tileheight)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  public addCharacter(character: Character, isTarget = false) {\r\n    this.characters.push(character)\r\n    if (isTarget) {\r\n      this.targetCharacter = character\r\n    }\r\n    this.layerContainer.addChildZ(character.bodySprite, 1)\r\n    this.layerContainer.addChildZ(character.shadowSprite, 1)\r\n    this.debugLayerContainer.addChild(character.debugCircle)\r\n    this.debugLayerContainer.addChild(character.debugRect)\r\n  }\r\n  public update() {\r\n    // preUpdate\r\n    this.characters.forEach(chara => chara.preUpdate())\r\n    // update\r\n    this.characters.forEach(chara => {\r\n      if (chara.preUpdateInfo != null) {\r\n        const [moveX, moveY] = [chara.preUpdateInfo.moveX, chara.preUpdateInfo.moveY]\r\n        chara.x += moveX\r\n        chara.y += moveY\r\n        chara.currentDirection = chara.preUpdateInfo.nextDirection\r\n        chara.preUpdateInfo = null\r\n      }\r\n      chara.update()\r\n    })\r\n    // 衝突判定など、ゲームの世界の都合でpreUpdateの内容に干渉しつつ、確定させる。\r\n    this.characters.forEach(chara => {\r\n      if (chara.preUpdateInfo != null) {\r\n        let [moveX, moveY] = [chara.preUpdateInfo.moveX, chara.preUpdateInfo.moveY]\r\n        if ((moveX != 0 || moveY != 0)) {\r\n          // キャラ\r\n          const [hitCharacter, hitDistanceRate] = this.hitOtherCaracter(chara, moveX, moveY)\r\n          if (hitCharacter) {\r\n            // キャラにめり込んだ分を戻す\r\n            moveX = (moveX - (moveX * hitDistanceRate))\r\n            moveY = (moveY - (moveY * hitDistanceRate))\r\n          }\r\n          // 地形\r\n          {\r\n            const [hit, excessX, excessY] = this.hitWall(chara, moveX, moveY)\r\n            // ぶつからなかった\r\n            if (!hit) {\r\n              chara.x += moveX\r\n              chara.y += moveY\r\n            }\r\n            // ぶつかった \r\n            else {\r\n              // 上下左右移動時は押し戻しに従う\r\n              if (excessX === 0 || excessY === 0) {\r\n                chara.x += (moveX - excessX)\r\n                chara.y += (moveY - excessY)\r\n              }\r\n              // 斜め移動時は片方のみの移動を試みる\r\n              else {\r\n                if (!this.hitWall(chara, 0, moveY)[0]) {\r\n                  chara.y += moveY\r\n                  chara.x += (moveX - excessX) // 移動しなかった方向についても押し戻しは適用\r\n                }\r\n                else if (!this.hitWall(chara, moveX, 0)[0]) {\r\n                  chara.x += moveX\r\n                  chara.y += (moveY - excessY) // 移動しなかった方向についても押し戻しは適用\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        chara.currentDirection = chara.preUpdateInfo.nextDirection\r\n        chara.preUpdateInfo = null\r\n        chara.update()\r\n      } else {\r\n        chara.update()\r\n      }\r\n    })\r\n\r\n    // 視点移動\r\n    const rightLimitX = 649 - 128\r\n    const leftLimitX = 128\r\n    const bottomLimitY = 480 - 96\r\n    const topLimitY = 96\r\n    if (this.targetCharacter) {\r\n      const offsetX = this.targetCharacter.x + this.x\r\n      if (offsetX > rightLimitX) {\r\n        this.x = -(this.targetCharacter.x - rightLimitX)\r\n      }\r\n      else if (offsetX < leftLimitX) {\r\n        this.x = -(this.targetCharacter.x - leftLimitX)\r\n      }\r\n      const offsetY = this.targetCharacter.y + this.y\r\n      if (offsetY > bottomLimitY) {\r\n        this.y = -(this.targetCharacter.y - bottomLimitY)\r\n      }\r\n      else if (offsetY < topLimitY) {\r\n        this.y = -(this.targetCharacter.y - topLimitY)\r\n      }\r\n    }\r\n    this.x = Math.floor(Math.min(0, Math.max(-(this.mapData.tilewidth * this.horizontalGridNum - 640), this.x)))\r\n    this.y = Math.floor(Math.min(0, Math.max(-(this.mapData.tileheight * this.verticalGridNum - 480), this.y)))\r\n    // layerContainerについては自前でソートを行う\r\n    this.layerContainer.sortChildren()\r\n  }\r\n  // 他キャラとの衝突判定\r\n  private hitOtherCaracter(targetCharacter: Character, offsetX: number, offsetY: number): [boolean, number] {\r\n    const targetCircle = targetCharacter.hitCircle.clone()\r\n    targetCircle.x += offsetX\r\n    targetCircle.y += offsetY\r\n    let hitDistance = 0\r\n    const hit = this.characters.some(character => {\r\n      if (targetCharacter === character) {\r\n        return false\r\n      }\r\n      const [x1, y1, x2, y2] = [targetCircle.x, targetCircle.y, character.hitCircle.x, character.hitCircle.y]\r\n      // めり込んだ距離(の2乗)\r\n      hitDistance = (targetCircle.radius + character.hitCircle.radius) - Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\r\n      const hit = hitDistance >= 0\r\n      return hit\r\n    })\r\n    return [hit, hit ? hitDistance / Math.sqrt(Math.pow(offsetX, 2) + Math.pow(offsetY, 2)) : 0]\r\n  }\r\n  // 壁との衝突判定\r\n  private hitWall(targetCharacter: Character, offsetX: number, offsetY: number): [boolean, number, number] {\r\n    const targetRect = targetCharacter.hitRect.clone()\r\n    targetRect.x += offsetX\r\n    targetRect.y += offsetY\r\n    let excessX = 0 // めり込んだ量X\r\n    let excessY = 0 // めり込んだ量Y\r\n    const hit = this.walls.some(wall => {\r\n      const hHit = targetRect.left < wall.right && targetRect.right > wall.left\r\n      const vHit = targetRect.top < wall.bottom && targetRect.bottom > wall.top\r\n      const hit = hHit && vHit\r\n      // 衝突した場合はめり込み量計算\r\n      if (hit) {\r\n        if (offsetX < 0) {\r\n          excessX = targetRect.left - wall.right\r\n        } else if (offsetX > 0) {\r\n          excessX = targetRect.right - wall.left\r\n        }\r\n        if (offsetY < 0) {\r\n          excessY = targetRect.top - wall.bottom\r\n        } else if (offsetY > 0) {\r\n          excessY = targetRect.bottom - wall.top\r\n        }\r\n      }\r\n      return hit\r\n    })\r\n    return [hit, excessX, excessY]\r\n  }\r\n  public setDebugMode(flag: boolean) {\r\n    this.debugLayerContainer.visible = flag\r\n  }\r\n}","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n// 高速歩きで壁にぶつかった場合、移動しないのではなくx, yについて移動できるところまで戻してあげる。\r\nimport Vue from \"vue\"\r\nimport * as PIXI from \"pixi.js\"\r\nimport { Character, PlayerRoutine, UroUroRoutine } from '@/stages/012/Character'\r\nimport { Field } from '@/stages/012/Field'\r\n\r\nclass FpsCounter {\r\n  private ms = 0\r\n  private counter = 0\r\n  public averageMs = 0\r\n  constructor(private oldNow = performance.now()) {}\r\n  public checkPoint() {\r\n    const now = performance.now()\r\n    this.ms += (now - this.oldNow)\r\n    this.oldNow = now\r\n    ++this.counter\r\n    if (this.counter >= 60) {\r\n      this.averageMs = this.ms / this.counter\r\n      this.counter = 0\r\n      this.ms = 0\r\n    }\r\n  }\r\n}\r\n\r\nexport default Vue.extend({\r\n  data(): {\r\n    pixiApp: PIXI.Application | null;\r\n    field: Field | null;\r\n    pressedKeyCodeSet: Set<number>;\r\n    fpsCounter: FpsCounter;\r\n    npc: Character | null;\r\n    isDebugMode: boolean;\r\n    } {\r\n    return {\r\n      pixiApp: null,\r\n      field: null,\r\n      pressedKeyCodeSet: new Set(),\r\n      fpsCounter: new FpsCounter(),\r\n      npc: null,\r\n      isDebugMode: false\r\n    }\r\n  },\r\n  mounted() {\r\n    PIXI.settings.RESOLUTION = window.devicePixelRatio\r\n    PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST\r\n    // PIXI.settings.TARGET_FPMS = 1\r\n\r\n    window.onkeydown = this.onKeyDown\r\n    window.onkeyup = this.onKeyUp\r\n\r\n    const opt = { \r\n      width: 640,\r\n      height: 480,\r\n      autoDensity: true\r\n    }\r\n    this.pixiApp = new PIXI.Application(opt)\r\n    this.pixiApp.ticker.maxFPS = 60\r\n    this.pixiApp.ticker.minFPS = 60\r\n\r\n    const container = this.$refs[\"pixi_area\"] as any\r\n    container.appendChild(this.pixiApp.view)\r\n\r\n    // 背景色\r\n    const bg = new PIXI.Sprite(PIXI.Texture.WHITE)\r\n    bg.width = 320\r\n    bg.height = 240\r\n    bg.tint = 0xcccccc\r\n    this.pixiApp.stage.addChild(bg)\r\n\r\n    PIXI.utils.clearTextureCache()\r\n    PIXI.Loader.shared\r\n      .reset()\r\n      .add(\"/arpg-sample/images/stages/009/chara01.png\")\r\n      .add(\"/arpg-sample/images/stages/009/chara02.png\")\r\n      .add(\"/arpg-sample/images/stages/012/mapchip.png\")\r\n      .add(\"/arpg-sample/images/stages/012/mapchip.json\")\r\n      .add(\"/arpg-sample/images/stages/012/map01.json\")\r\n      .load(() => {\r\n\r\n        // RenderTextureに必要な画像すべてを描き込む\r\n        const renderTexture = PIXI.RenderTexture.create({ width: 1024, height: 1024 })\r\n        const renderSprite = PIXI.Sprite.from(renderTexture)\r\n\r\n        // mapchipを描き込む\r\n        const spriteMapChip = PIXI.Sprite.from(PIXI.Loader.shared.resources[\"/arpg-sample/images/stages/012/mapchip.png\"].texture)\r\n        this.pixiApp!.renderer.render(spriteMapChip, renderTexture, false)\r\n        // chara01を書き込む\r\n        const sprite01 = PIXI.Sprite.from(PIXI.Loader.shared.resources[\"/arpg-sample/images/stages/009/chara01.png\"].texture)\r\n        sprite01.position.set(256, 0)\r\n        this.pixiApp!.renderer.render(sprite01, renderTexture, false)\r\n\r\n        // フィールド\r\n        this.field = new Field(\r\n          renderTexture,\r\n          PIXI.Loader.shared.resources[\"/arpg-sample/images/stages/012/mapchip.json\"].data,\r\n          PIXI.Loader.shared.resources[\"/arpg-sample/images/stages/012/map01.json\"].data)\r\n        this.pixiApp!.stage.addChild(this.field)\r\n\r\n        // プレイヤー\r\n        const chara1 = new Character(renderTexture, new PIXI.Point(256, 0), new PlayerRoutine(this.pressedKeyCodeSet))\r\n        chara1.x = 200\r\n        chara1.y = 120\r\n        this.field.addCharacter(chara1, true)\r\n      })\r\n\r\n    // メインループ\r\n    this.pixiApp.ticker.add(this.update)\r\n  },\r\n  methods: {\r\n    onKeyDown(event: KeyboardEvent) {\r\n      this.pressedKeyCodeSet.add(event.keyCode)\r\n    },\r\n    onKeyUp(event: any) {\r\n      this.pressedKeyCodeSet.delete(event.keyCode)\r\n    },\r\n    update(delta: number) {\r\n      this.fpsCounter.checkPoint()\r\n      if (this.field != null) {\r\n        this.field.update()\r\n      }\r\n    },\r\n    onClickToggleDebugMode() {\r\n      this.isDebugMode = !this.isDebugMode\r\n      this.field!.setDebugMode(this.isDebugMode)\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    // this.pixiApp!.ticker.remove(this.update)\r\n    this.pixiApp!.destroy(true)\r\n  },\r\n  components: {},\r\n  computed: {},\r\n  props: []\r\n})\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??ref--13-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./View.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??ref--13-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./View.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./View.vue?vue&type=template&id=3a99d7b8&scoped=true&\"\nimport script from \"./View.vue?vue&type=script&lang=ts&\"\nexport * from \"./View.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./View.vue?vue&type=style&index=0&id=3a99d7b8&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"3a99d7b8\",\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./View.vue?vue&type=style&index=0&id=3a99d7b8&scoped=true&lang=scss&\""],"sourceRoot":""}