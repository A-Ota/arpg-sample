{"version":3,"sources":["webpack:///./src/stages/012/View.vue?01d6","webpack:///./node_modules/core-js/modules/es.array.some.js","webpack:///./node_modules/core-js/modules/es.array.filter.js","webpack:///./node_modules/core-js/modules/es.map.js","webpack:///./src/stages/012/View.vue?a9f2","webpack:///./src/stages/012/Character.ts","webpack:///./src/stages/012/Field.ts","webpack:///./src/stages/012/View.vue?cb5b","webpack:///./src/stages/012/View.vue?1486","webpack:///./src/stages/012/View.vue"],"names":["$","$some","some","arrayMethodIsStrict","arrayMethodUsesToLength","STRICT_METHOD","USES_TO_LENGTH","target","proto","forced","callbackfn","this","arguments","length","undefined","$filter","filter","arrayMethodHasSpeciesSupport","HAS_SPECIES_SUPPORT","collection","collectionStrong","module","exports","init","render","_vm","_h","$createElement","_c","_self","staticStyle","ref","_v","_s","fpsCounter","averageMs","toFixed","staticRenderFns","moveX","moveY","nextDirection","texture","textureOffset","routine","x","y","hitCircle","hitRect","animationFrame","_currentDirection","preUpdateInfo","animationStep","bodySprite","SortableSprite","baseTexture","character","anchor","set","shadowTexture","shadowSprite","alpha","debugCircle","lineStyle","drawCircle","debugRect","drawRect","width","height","value","syncTexture","offsetX","offsetY","currentDirection","frame","preUpdate","zOrder","position","KEY_CODE_LEFT","KEY_CODE_UP","KEY_CODE_RIGHT","KEY_CODE_DOWN","calcMoveXY","direction","speed","slantSpeed","pressedKeyCodeSet","has","isMoving","frameCountToWait","frameCountToMove","Math","floor","random","AREA_DIVIDE_GRID_NUM","GAME_AREA_WIDTH","GAME_AREA_HEIGHT","SIGHT_MOVE_X","SIGHT_MOVE_Y","type","left","top","right","bottom","areaGridX","areaGridY","isAdded","mapChipData","mapData","horizontalGridNum","verticalGridNum","targetCharacter","fieldCharacters","inSightArea","walls","collisions","collisionsByArea","Map","fieldCharactersByArea","textureMap","textureList","frameCount","use32bitIndex","sortableChildren","bgLayerContainer","layerContainer","SortableParticleContainer","uvs","vertices","tint","airLayerContainer","debugLayerContainer","visible","addChild","generateMap","ceil","tilewidth","tileheight","updateInSightArea","on","clearMap","forEach","destroy","clear","gridY","gridYCount","imageheight","gridX","gridXCount","imagewidth","clone","push","mapChipIndex","layerIndex","textureIndex","layers","data","addFrame","firstIndex","tilesets","v","source","firstgid","collision","areaGridString","gridToAreaGrid","toString","get","isTarget","positionToAreaGrid","fieldCharacter","addFieldCharacterToArea","update","isInSight","getInSightFieldCharacters","hitOtherCaracter","hitCharacter","hitDistanceRate","hitWall","hit","excessX","excessY","oldAreaGridX","oldAreaGridY","removeFieldCharacterFromArea","removeChild","rightLimitX","leftLimitX","bottomLimitY","topLimitY","oldInSightAreaX","oldInSightAreaY","movedAreaX","movedAreaY","updateCharacterVisibilityByMovedAreaOffset","min","max","sortChildren","targetFieldCharacter","targetCircle","hitDistance","otherFieldCharacters","getOtherFieldCharactersByAreaGrid","x1","y1","x2","y2","radius","sqrt","pow","areaGrid","getCollisionsByAreaGrid","targetRect","hHit","vHit","areaGridStrings","Array","prototype","apply","fieldCharacter2","flag","startX","endX","areaX","areaY","startY","endY","oldNow","performance","now","ms","counter","extend","pixiApp","field","Set","npc","isDebugMode","mounted","RESOLUTION","window","devicePixelRatio","SCALE_MODE","NEAREST","onkeydown","onKeyDown","onkeyup","onKeyUp","opt","autoDensity","ticker","maxFPS","minFPS","container","$refs","appendChild","view","bg","WHITE","stage","clearTextureCache","shared","reset","add","load","renderTexture","create","spriteMapChip","from","resources","renderer","sprite01","sprite02","chara1","addCharacter","i","console","log","methods","event","keyCode","delta","checkPoint","onClickToggleDebugMode","setDebugMode","beforeDestroy","components","computed","props","component"],"mappings":"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","file":"js/chunk-7c91bb5d.ead7191d.js","sourcesContent":["export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./View.vue?vue&type=style&index=0&id=eb93f37e&scoped=true&lang=scss&\"","'use strict';\nvar $ = require('../internals/export');\nvar $some = require('../internals/array-iteration').some;\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar STRICT_METHOD = arrayMethodIsStrict('some');\nvar USES_TO_LENGTH = arrayMethodUsesToLength('some');\n\n// `Array.prototype.some` method\n// https://tc39.es/ecma262/#sec-array.prototype.some\n$({ target: 'Array', proto: true, forced: !STRICT_METHOD || !USES_TO_LENGTH }, {\n  some: function some(callbackfn /* , thisArg */) {\n    return $some(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar $filter = require('../internals/array-iteration').filter;\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\nvar arrayMethodUsesToLength = require('../internals/array-method-uses-to-length');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');\n// Edge 14- issue\nvar USES_TO_LENGTH = arrayMethodUsesToLength('filter');\n\n// `Array.prototype.filter` method\n// https://tc39.es/ecma262/#sec-array.prototype.filter\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH }, {\n  filter: function filter(callbackfn /* , thisArg */) {\n    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","'use strict';\nvar collection = require('../internals/collection');\nvar collectionStrong = require('../internals/collection-strong');\n\n// `Map` constructor\n// https://tc39.es/ecma262/#sec-map-objects\nmodule.exports = collection('Map', function (init) {\n  return function Map() { return init(this, arguments.length ? arguments[0] : undefined); };\n}, collectionStrong);\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"position\":\"relative\"}},[_c('div',{ref:\"pixi_area\",staticStyle:{\"width\":\"640px\",\"height\":\"480px\"}}),(true)?_c('div',{staticStyle:{\"position\":\"absolute\",\"left\":\"4px\",\"top\":\"4px\",\"color\":\"#fff\"}},[_vm._v(_vm._s((1000 / _vm.fpsCounter.averageMs).toFixed(2))+\" fps\")]):_vm._e()])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import * as PIXI from \"pixi.js\"\r\n\r\nimport { SortableSprite } from '@/stages/005/SortableSprite'\r\n\r\n// 次フレームで行動したい内容\r\nclass PreUpdateInfo {\r\n  constructor(\r\n    public moveX: number,\r\n    public moveY: number,\r\n    public nextDirection: number\r\n    ) {}\r\n}\r\n\r\n// キャラクター\r\nexport class Character {\r\n  public x: number = 0\r\n  public y: number = 0\r\n  public hitCircle: PIXI.Circle = new PIXI.Circle(0, 0, 12)\r\n  public hitRect: PIXI.Rectangle = new PIXI.Rectangle(-12, -12, 24, 24)\r\n  private animationFrame = 0\r\n  private _currentDirection = 2\r\n  public preUpdateInfo: PreUpdateInfo | null = null\r\n  public bodySprite!: SortableSprite\r\n  public shadowSprite!: SortableSprite\r\n  public debugCircle!: PIXI.Graphics\r\n  public debugRect!: PIXI.Graphics\r\n  set currentDirection(value: number) {\r\n    this._currentDirection = value\r\n    this.syncTexture()\r\n  }\r\n  get currentDirection() {\r\n    return this._currentDirection\r\n  }\r\n  private animationStep = 0\r\n  constructor(texture: PIXI.Texture, private textureOffset: PIXI.Point, public routine: BaseRoutine) {\r\n    // 体\r\n    this.bodySprite = new SortableSprite()\r\n    this.bodySprite.texture = new PIXI.Texture(texture.baseTexture, new PIXI.Rectangle(textureOffset.x, textureOffset.y, 32, 64))\r\n    routine.character = this\r\n    this.bodySprite.anchor.set(0.5, 1)\r\n\r\n    // 影\r\n    const shadowTexture = new PIXI.Texture(texture.baseTexture, new PIXI.Rectangle(224, 0, 32, 32))\r\n    this.shadowSprite = new SortableSprite()\r\n    this.shadowSprite.texture = shadowTexture\r\n    this.shadowSprite.alpha = 0.5\r\n    this.shadowSprite.anchor.set(0.5, 0.5)\r\n\r\n    // 当たり判定\r\n    this.debugCircle = new PIXI.Graphics()\r\n    this.debugCircle.lineStyle(2, 0xFF5555, 1)\r\n    this.debugCircle.alpha = 0.7\r\n    this.debugCircle.drawCircle(0, 0, 11)\r\n    this.debugRect = new PIXI.Graphics()\r\n    this.debugRect.lineStyle(2, 0x5555FF, 1)\r\n    this.debugRect.alpha = 0.7\r\n    this.debugRect.drawRect(this.hitRect.x, this.hitRect.y, this.hitRect.width, this.hitRect.height)\r\n  }\r\n  private syncTexture() {\r\n    let offsetX = 0\r\n    let offsetY = 0\r\n    switch(this.currentDirection) {\r\n      case 1:\r\n        offsetX = 96\r\n        break;\r\n      case 2:\r\n        break;\r\n      case 3:\r\n        offsetX = 96\r\n        offsetY = 64\r\n        break;\r\n      case 4:\r\n        offsetY = 64\r\n        break;\r\n      case 6:\r\n        offsetY = 128\r\n        break;\r\n      case 7:\r\n        offsetX = 96\r\n        offsetY = 128\r\n        break;\r\n      case 8:\r\n        offsetY = 192\r\n        break;\r\n      case 9:\r\n        offsetX = 96\r\n        offsetY = 192\r\n        break;\r\n    }\r\n\r\n    offsetX += (this.animationStep === 3 ? 1 : this.animationStep) * 32\r\n    const frame = new PIXI.Rectangle(\r\n      this.textureOffset.x + offsetX,\r\n      this.textureOffset.y + offsetY,\r\n      32,\r\n      64\r\n    )\r\n    this.bodySprite.texture.frame = frame\r\n  }\r\n  public preUpdate() {\r\n    this.routine.preUpdate()\r\n  }\r\n  public update() {\r\n    ;[this.bodySprite.x, this.bodySprite.y] = [this.x, this.y + 8]\r\n    ;[this.shadowSprite.x, this.shadowSprite.y] = [this.x, this.y]\r\n    ;[this.hitCircle.x, this.hitCircle.y] = [this.x, this.y]\r\n    ;[this.debugCircle.x, this.debugCircle.y] = [this.x, this.y]\r\n    ;[this.hitRect.x, this.hitRect.y] = [this.x - 12, this.y - 12]\r\n    ;[this.debugRect.x, this.debugRect.y] = [this.x, this.y]\r\n    this.bodySprite.zOrder = this.shadowSprite.zOrder = this.bodySprite.position.y\r\n    ++this.animationFrame\r\n    if (this.animationFrame > 30) {\r\n      this.animationFrame = 0\r\n      this.animationStep = (this.animationStep + 1) % 4\r\n      this.syncTexture()\r\n    }\r\n  }\r\n}\r\n\r\n// ルーチン\r\nabstract class BaseRoutine {\r\n  public character!: Character\r\n  abstract preUpdate(): void\r\n}\r\n\r\nconst KEY_CODE_LEFT = 37\r\nconst KEY_CODE_UP = 38\r\nconst KEY_CODE_RIGHT = 39\r\nconst KEY_CODE_DOWN = 40\r\n\r\n// 方向とスピードからx,yの移動速度算出\r\nconst calcMoveXY = function(direction: number, speed: number): [number, number] {\r\n  const slantSpeed = speed * 0.7\r\n  switch (direction) {\r\n    case 1:\r\n      return [-slantSpeed, slantSpeed]\r\n    case 2:\r\n      return [0, speed]\r\n    case 3:\r\n      return [slantSpeed, slantSpeed]\r\n    case 4:\r\n      return [-speed, 0]\r\n    case 6:\r\n      return [speed, 0]\r\n    case 7:\r\n      return [-slantSpeed, -slantSpeed]\r\n    case 8:\r\n      return [0, -speed]\r\n    case 9:\r\n      return [slantSpeed, -slantSpeed]\r\n  }\r\n  return [0, 0]\r\n}\r\n\r\n// プレイヤー操作用ルーチン\r\nexport class PlayerRoutine extends BaseRoutine {\r\n  constructor(private pressedKeyCodeSet: Set<number>) {\r\n    super()\r\n  }\r\n\r\n  public preUpdate() {\r\n    let direction: number | null = null \r\n    // 向き取得\r\n    if (this.pressedKeyCodeSet.has(KEY_CODE_LEFT)) {\r\n      if (this.pressedKeyCodeSet.has(KEY_CODE_DOWN)) {\r\n        direction = 1\r\n      } else if (this.pressedKeyCodeSet.has(KEY_CODE_UP)) {\r\n        direction = 7\r\n      } else {\r\n        direction = 4\r\n      }\r\n    } else if (this.pressedKeyCodeSet.has(KEY_CODE_RIGHT)) {\r\n      if (this.pressedKeyCodeSet.has(KEY_CODE_DOWN)) {\r\n        direction = 3\r\n      } else if (this.pressedKeyCodeSet.has(KEY_CODE_UP)) {\r\n        direction = 9\r\n      } else {\r\n        direction = 6\r\n      }\r\n    } else if (this.pressedKeyCodeSet.has(KEY_CODE_UP)) {\r\n      direction = 8\r\n    } else if (this.pressedKeyCodeSet.has(KEY_CODE_DOWN)) {\r\n      direction = 2\r\n    }\r\n    // 向かせたり歩かせたり\r\n    if (direction != null) {\r\n      const [moveX, moveY] = calcMoveXY(direction, 3)\r\n      this.character.preUpdateInfo = new PreUpdateInfo(moveX, moveY, direction)\r\n    }\r\n  }\r\n}\r\n\r\n// うろうろルーチン\r\nexport class UroUroRoutine extends BaseRoutine {\r\n  constructor(\r\n    private isMoving = false,\r\n    private frameCountToWait: number = 0,\r\n    private frameCountToMove: number = 60) {\r\n    super()\r\n  }\r\n  preUpdate() {\r\n    // 移動中\r\n    if (this.isMoving) {\r\n      const [moveX, moveY] = calcMoveXY(this.character.currentDirection, 1)\r\n      this.character.preUpdateInfo = new PreUpdateInfo(moveX, moveY, this.character.currentDirection)\r\n      --this.frameCountToWait\r\n      if (this.frameCountToWait <= 0) {\r\n        this.frameCountToWait = 0\r\n        this.frameCountToMove = 60 + 30 * Math.floor(Math.random() * 3)\r\n        this.isMoving = false\r\n      }\r\n    }\r\n    // 待機中\r\n    else {\r\n      --this.frameCountToMove\r\n      if (this.frameCountToMove <= 0) {\r\n        this.frameCountToMove = 0\r\n        this.frameCountToWait = 60\r\n        const direction = [1, 2, 3, 4, 6, 7, 8, 9][Math.floor(Math.random() * 8)]\r\n        this.character.preUpdateInfo = new PreUpdateInfo(0, 0, direction)\r\n        this.isMoving = true\r\n      }\r\n    }\r\n  }\r\n}","import { Character } from '@/stages/012/Character'\r\nimport { SortableParticleContainer } from '@/stages/005/SortableParticleContainer'\r\nimport * as PIXI from \"pixi.js\"\r\nimport * as PIXITilemap from '@/pixi-tilemap/index'\r\n\r\nconst AREA_DIVIDE_GRID_NUM = 3\r\nconst GAME_AREA_WIDTH = 640\r\nconst GAME_AREA_HEIGHT = 480\r\nconst SIGHT_MOVE_X = GAME_AREA_WIDTH / 3\r\nconst SIGHT_MOVE_Y = GAME_AREA_HEIGHT / 3\r\n\r\nclass Collosion {\r\n  constructor(\r\n    public type: number,\r\n    public left: number,\r\n    public top: number,\r\n    public right: number,\r\n    public bottom: number\r\n  ) {}\r\n}\r\n\r\nclass FieldCharacter {\r\n  public isAdded: boolean = false\r\n  constructor(\r\n    public character: Character,\r\n    public areaGridX: number,\r\n    public areaGridY: number,\r\n  ) {}\r\n}\r\n\r\nexport class Field extends PIXI.Container {\r\n  private bgLayerContainer!: PIXITilemap.CompositeRectTileLayer\r\n  private airLayerContainer!: PIXITilemap.CompositeRectTileLayer\r\n  private layerContainer!: SortableParticleContainer\r\n  private debugLayerContainer!: PIXI.Container\r\n  public horizontalGridNum = 200\r\n  public verticalGridNum = 200\r\n  private targetCharacter: Character | null = null\r\n  private fieldCharacters: Array<FieldCharacter> = []\r\n  private inSightArea: PIXI.Rectangle = new PIXI.Rectangle()\r\n\r\n  private walls: Array<PIXI.Rectangle> = []\r\n  private collisions: Array<Collosion> = []\r\n  private collisionsByArea: Map<string, Array<Collosion>> = new Map()\r\n  private fieldCharactersByArea: Map<string, Array<FieldCharacter>> = new Map()\r\n  private textureMap: Map<string, PIXI.Texture> = new Map()\r\n  private textureList: Array<PIXI.Texture> = []\r\n  private frameCount = 0\r\n  constructor(private texture: PIXI.Texture, private mapChipData: any, private mapData: any) {\r\n    super()\r\n\r\n    // 150,000チップ以上使えるようにする\r\n    PIXITilemap.Constant.use32bitIndex = true;\r\n\r\n    this.sortableChildren = true\r\n    this.bgLayerContainer = new PIXITilemap.CompositeRectTileLayer(0, [texture])\r\n    this.layerContainer = new SortableParticleContainer(20000, { uvs: true, vertices: true, tint: true })\r\n    this.airLayerContainer = new PIXITilemap.CompositeRectTileLayer(0, [texture])\r\n    this.debugLayerContainer = new PIXI.Container()\r\n    this.debugLayerContainer.visible = false\r\n    this.addChild(this.bgLayerContainer)\r\n    this.addChild(this.layerContainer)\r\n    this.addChild(this.airLayerContainer)\r\n    this.addChild(this.debugLayerContainer)\r\n\r\n    this.generateMap()\r\n    this.inSightArea.width = Math.ceil(GAME_AREA_WIDTH / (AREA_DIVIDE_GRID_NUM * this.mapData.tilewidth)) + 4\r\n    this.inSightArea.height = Math.ceil(GAME_AREA_HEIGHT / (AREA_DIVIDE_GRID_NUM * this.mapData.tileheight)) + 4\r\n    this.updateInSightArea()\r\n    this.on('added', () => {\r\n      // 親に追加されたときになにかやるならここで\r\n    })\r\n  }\r\n  public reloadMap(mapData: any) {\r\n    this.mapData = mapData\r\n    this.clearMap()\r\n    this.generateMap()\r\n  }\r\n  public clearMap() {\r\n    this.textureMap.forEach(value => value.destroy())\r\n    this.textureMap.clear()\r\n    this.bgLayerContainer.clear()\r\n    this.airLayerContainer.clear()\r\n    this.walls.length = 0\r\n  }\r\n  public generateMap() {\r\n    // まずは全てのチップをテクスチャ化\r\n    this.textureList.forEach(texture => texture.destroy())\r\n    this.textureList.length = 0\r\n\r\n    for (let gridY = 0, gridYCount = Math.floor(this.mapChipData.imageheight / this.mapChipData.tileheight); gridY < gridYCount; ++gridY) {\r\n      for (let gridX = 0, gridXCount = Math.floor(this.mapChipData.imagewidth / this.mapChipData.tilewidth); gridX < gridXCount; ++gridX) {\r\n        const texture = this.texture.clone()\r\n        texture.frame = new PIXI.Rectangle(\r\n          this.mapChipData.tilewidth * gridX,\r\n          this.mapChipData.tileheight * gridY,\r\n          this.mapChipData.tilewidth,\r\n          this.mapChipData.tileheight)\r\n        this.textureList.push(texture)\r\n      }\r\n    }\r\n    // チップを配置\r\n    {\r\n      this.horizontalGridNum = this.mapData.width\r\n      this.verticalGridNum = this.mapData.height\r\n      for (let gridY = 0; gridY < this.verticalGridNum; ++gridY) {\r\n        for (let gridX = 0; gridX < this.horizontalGridNum; ++gridX) {\r\n          const mapChipIndex = gridX + gridY * this.horizontalGridNum\r\n          // 下層、中層、上層地形\r\n          for (let layerIndex = 0; layerIndex < 3; ++layerIndex) {\r\n            const textureIndex = this.mapData.layers[layerIndex].data[mapChipIndex]\r\n            if (textureIndex > 0) {\r\n              this.bgLayerContainer.addFrame(this.textureList[textureIndex - 1], gridX * this.mapChipData.tilewidth, gridY * this.mapChipData.tileheight)\r\n            }\r\n          }\r\n          // 上空\r\n          {\r\n            const textureIndex = this.mapData.layers[3].data[mapChipIndex]\r\n            if (textureIndex > 0) {\r\n              this.airLayerContainer.addFrame(this.textureList[textureIndex - 1], gridX * this.mapChipData.tilewidth, gridY * this.mapChipData.tileheight)\r\n            }\r\n          }\r\n          // 衝突判定\r\n          {\r\n            // 衝突判定用チップの開始indexを取得しておく\r\n            const firstIndex = this.mapData.tilesets.filter((v: any) => v.source === 'collosion.json')[0].firstgid\r\n            const textureIndex = this.mapData.layers[4].data[mapChipIndex]\r\n            if (textureIndex > 0) {\r\n              this.collisions[gridY * this.horizontalGridNum + gridX] = new Collosion(\r\n                textureIndex - firstIndex,\r\n                gridX * this.mapData.tilewidth,\r\n                gridY * this.mapData.tileheight,\r\n                gridX * this.mapData.tilewidth + this.mapData.tilewidth,\r\n                gridY * this.mapData.tileheight + this.mapData.tileheight\r\n              )\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // 衝突判定を4x4グリッド毎にエリア分け\r\n      for (let gridY = 0; gridY < this.verticalGridNum; ++gridY) {\r\n        for (let gridX = 0; gridX < this.horizontalGridNum; ++gridX) {\r\n          const collision = this.collisions[gridY * this.horizontalGridNum + gridX]\r\n          if (collision != null) {\r\n            const areaGridString = this.gridToAreaGrid(gridX, gridY).toString()\r\n            if (this.collisionsByArea.has(areaGridString)) {\r\n              this.collisionsByArea.get(areaGridString)!.push(collision)\r\n            } else {\r\n              this.collisionsByArea.set(areaGridString, [collision])\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // console.log(`衝突判定のエリア分けの数:${this.collisionsByArea.size}`)\r\n    }\r\n  }\r\n  public addCharacter(character: Character, isTarget = false) {\r\n    const [areaGridX, areaGridY] = this.positionToAreaGrid(character.x, character.y)\r\n    const fieldCharacter = new FieldCharacter(character, areaGridX, areaGridY)\r\n    this.fieldCharacters.push(fieldCharacter)\r\n    this.addFieldCharacterToArea(fieldCharacter, areaGridX, areaGridY)\r\n    if (isTarget) {\r\n      this.targetCharacter = character\r\n    }\r\n    character.update()\r\n    this.debugLayerContainer.addChild(character.debugCircle)\r\n    this.debugLayerContainer.addChild(character.debugRect)\r\n    // TODO:追加時に視界内かを判定して処理\r\n    if (this.isInSight(fieldCharacter)) {\r\n      this.layerContainer.addChild(fieldCharacter.character.shadowSprite)\r\n      this.layerContainer.addChild(fieldCharacter.character.bodySprite)\r\n      fieldCharacter.isAdded = true\r\n    }\r\n  }\r\n  public update() {\r\n    // const t1 = performance.now()\r\n    const fieldCharacters = this.getInSightFieldCharacters()\r\n    // preUpdate\r\n    fieldCharacters.forEach(fieldCharacter => fieldCharacter.character.preUpdate())\r\n    // 衝突判定など、ゲームの世界の都合でpreUpdateの内容に干渉しつつ、確定させる。\r\n    fieldCharacters.forEach(fieldCharacter => {\r\n      if (fieldCharacter.character.preUpdateInfo != null) {\r\n        let [moveX, moveY] = [fieldCharacter.character.preUpdateInfo.moveX, fieldCharacter.character.preUpdateInfo.moveY]\r\n        if ((moveX != 0 || moveY != 0)) {\r\n          // キャラ\r\n          // const t1 = performance.now()\r\n          const [hitCharacter, hitDistanceRate] = this.hitOtherCaracter(fieldCharacter, moveX, moveY)\r\n          // t1sum += (performance.now() - t1)\r\n          if (hitCharacter) {\r\n            // キャラにめり込んだ分を戻す\r\n            moveX = (moveX - (moveX * hitDistanceRate))\r\n            moveY = (moveY - (moveY * hitDistanceRate))\r\n          }\r\n          // 地形\r\n          {\r\n            // const t2 = performance.now()\r\n            const [hit, excessX, excessY] = this.hitWall(fieldCharacter.character, moveX, moveY)\r\n            // t2sum += (performance.now() - t2)\r\n            // ぶつからなかった\r\n            if (!hit) {\r\n              fieldCharacter.character.x += moveX\r\n              fieldCharacter.character.y += moveY\r\n            }\r\n            // ぶつかった \r\n            else {\r\n              // 上下左右移動時は押し戻しに従う\r\n              if (excessX === 0 || excessY === 0) {\r\n                fieldCharacter.character.x += (moveX - excessX)\r\n                fieldCharacter.character.y += (moveY - excessY)\r\n              }\r\n              // 斜め移動時は片方のみの移動を試みる\r\n              else {\r\n                if (!this.hitWall(fieldCharacter.character, 0, moveY)[0]) {\r\n                  fieldCharacter.character.y += moveY\r\n                  fieldCharacter.character.x += (moveX - excessX) // 移動しなかった方向についても押し戻しは適用\r\n                }\r\n                else if (!this.hitWall(fieldCharacter.character, moveX, 0)[0]) {\r\n                  fieldCharacter.character.x += moveX\r\n                  fieldCharacter.character.y += (moveY - excessY) // 移動しなかった方向についても押し戻しは適用\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n        fieldCharacter.character.currentDirection = fieldCharacter.character.preUpdateInfo.nextDirection\r\n        fieldCharacter.character.preUpdateInfo = null\r\n\r\n        const [oldAreaGridX, oldAreaGridY] = [fieldCharacter.areaGridX, fieldCharacter.areaGridY]\r\n        fieldCharacter.character.update()\r\n        ;[fieldCharacter.areaGridX, fieldCharacter.areaGridY] = this.positionToAreaGrid(fieldCharacter.character.x, fieldCharacter.character.y)\r\n        // キャラの所属AreaGridの変更検知\r\n        if (fieldCharacter.areaGridX !== oldAreaGridX || fieldCharacter.areaGridY !== oldAreaGridY) {\r\n          this.removeFieldCharacterFromArea(fieldCharacter, oldAreaGridX, oldAreaGridY)\r\n          this.addFieldCharacterToArea(fieldCharacter,fieldCharacter.areaGridX, fieldCharacter.areaGridY)\r\n          // 視界外になったら非表示\r\n          if (!this.isInSight(fieldCharacter)) {\r\n            this.layerContainer.removeChild(fieldCharacter.character.shadowSprite)\r\n            this.layerContainer.removeChild(fieldCharacter.character.bodySprite)\r\n            fieldCharacter.isAdded = false\r\n          }\r\n        }\r\n        // console.log(`キャラの所属AreaGrid(${fieldCharacter.areaGridX}, ${fieldCharacter.areaGridY})`)\r\n      } else {\r\n        fieldCharacter.character.update()\r\n      }\r\n    })\r\n\r\n    // 視点移動\r\n    const rightLimitX = GAME_AREA_WIDTH - SIGHT_MOVE_X\r\n    const leftLimitX = SIGHT_MOVE_X\r\n    const bottomLimitY = GAME_AREA_HEIGHT - SIGHT_MOVE_Y\r\n    const topLimitY = SIGHT_MOVE_Y\r\n    if (this.targetCharacter) {\r\n      const offsetX = this.targetCharacter.x + this.x\r\n      if (offsetX > rightLimitX) {\r\n        this.x = -(this.targetCharacter.x - rightLimitX)\r\n      }\r\n      else if (offsetX < leftLimitX) {\r\n        this.x = -(this.targetCharacter.x - leftLimitX)\r\n      }\r\n      const offsetY = this.targetCharacter.y + this.y\r\n      if (offsetY > bottomLimitY) {\r\n        this.y = -(this.targetCharacter.y - bottomLimitY)\r\n      }\r\n      else if (offsetY < topLimitY) {\r\n        this.y = -(this.targetCharacter.y - topLimitY)\r\n      }\r\n      const [oldInSightAreaX, oldInSightAreaY] = [this.inSightArea.x, this.inSightArea.y]\r\n      this.updateInSightArea()\r\n      // 視界外になった領域のキャラを非表示に、視界内になった領域のキャラを表示に\r\n      const movedAreaX = this.inSightArea.x - oldInSightAreaX\r\n      const movedAreaY = this.inSightArea.y - oldInSightAreaY\r\n      this.updateCharacterVisibilityByMovedAreaOffset(movedAreaX, movedAreaY)\r\n    }\r\n    this.x = Math.floor(Math.min(0, Math.max(-(this.mapData.tilewidth * this.horizontalGridNum - GAME_AREA_WIDTH), this.x)))\r\n    this.y = Math.floor(Math.min(0, Math.max(-(this.mapData.tileheight * this.verticalGridNum - GAME_AREA_HEIGHT), this.y)))\r\n    // layerContainerについては自前でソートを行う\r\n    this.layerContainer.sortChildren()\r\n\r\n    // if (this.frameCount % 200 === 0) {\r\n      // console.log(`${performance.now() - t1}`)\r\n    // }\r\n    ++ this.frameCount\r\n\r\n  }\r\n  // 他キャラとの衝突判定\r\n  private hitOtherCaracter(targetFieldCharacter: FieldCharacter, offsetX: number, offsetY: number): [boolean, number] {\r\n    const targetCircle = targetFieldCharacter.character.hitCircle.clone()\r\n    targetCircle.x += offsetX\r\n    targetCircle.y += offsetY\r\n    let hitDistance = 0\r\n    const otherFieldCharacters = this.getOtherFieldCharactersByAreaGrid(targetFieldCharacter)\r\n    // const otherFieldCharacters = this.fieldCharacters.filter(fieldCharacter => targetFieldCharacter != fieldCharacter)\r\n    // console.log(otherFieldCharacters.length)\r\n    const hit = otherFieldCharacters.some(fieldCharacter => {\r\n      const [x1, y1, x2, y2] = [targetCircle.x, targetCircle.y, fieldCharacter.character.hitCircle.x, fieldCharacter.character.hitCircle.y]\r\n      // めり込んだ距離(の2乗)\r\n      hitDistance = (targetCircle.radius + fieldCharacter.character.hitCircle.radius) - Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2))\r\n      const hit = hitDistance >= 0\r\n      return hit\r\n    })\r\n    return [hit, hit ? hitDistance / Math.sqrt(Math.pow(offsetX, 2) + Math.pow(offsetY, 2)) : 0]\r\n  }\r\n  public hitWall(targetCharacter: Character, offsetX: number, offsetY: number): [boolean, number, number] {\r\n    const areaGrid = this.positionToAreaGrid(targetCharacter.x, targetCharacter.y)\r\n    const collisions = this.getCollisionsByAreaGrid(areaGrid)\r\n    // const collisions = this.collisions\r\n    // console.log(collisions.length)\r\n\r\n    const targetRect = targetCharacter.hitRect.clone()\r\n    targetRect.x += offsetX\r\n    targetRect.y += offsetY\r\n    let excessX = 0 // めり込んだ量X\r\n    let excessY = 0 // めり込んだ量Y\r\n\r\n    // そのキャラの周辺のcollisionを抽出\r\n    const hit = collisions.some(collision => {\r\n      const hHit = targetRect.left < collision.right && targetRect.right > collision.left\r\n      const vHit = targetRect.top < collision.bottom && targetRect.bottom > collision.top\r\n      const hit = hHit && vHit\r\n      // 衝突した場合はめり込み量計算\r\n      if (hit) {\r\n        if (offsetX < 0) {\r\n          excessX = targetRect.left - collision.right\r\n        } else if (offsetX > 0) {\r\n          excessX = targetRect.right - collision.left\r\n        }\r\n        if (offsetY < 0) {\r\n          excessY = targetRect.top - collision.bottom\r\n        } else if (offsetY > 0) {\r\n          excessY = targetRect.bottom - collision.top\r\n        }\r\n      }\r\n      return hit\r\n    })\r\n    return [hit, excessX, excessY]\r\n  }\r\n  private getOtherFieldCharactersByAreaGrid(fieldCharacter: FieldCharacter) {\r\n    const otherFieldCharacters: Array<FieldCharacter> = []\r\n    const areaGrid = [fieldCharacter.areaGridX, fieldCharacter.areaGridY]\r\n    const areaGridStrings = [\r\n      areaGrid.toString(),\r\n      [areaGrid[0] - 1, areaGrid[1]].toString(),\r\n      [areaGrid[0] - 1, areaGrid[1] - 1].toString(),\r\n      [areaGrid[0], areaGrid[1] - 1].toString(),\r\n      [areaGrid[0] + 1, areaGrid[1] - 1].toString(),\r\n      [areaGrid[0] + 1, areaGrid[1]].toString(),\r\n      [areaGrid[0] + 1, areaGrid[1] + 1].toString(),\r\n      [areaGrid[0], areaGrid[1] + 1].toString(),\r\n      [areaGrid[0] - 1, areaGrid[1] + 1].toString()\r\n    ]\r\n    areaGridStrings.forEach(areaGridString => {\r\n      if (this.fieldCharactersByArea.has(areaGridString)) {\r\n        Array.prototype.push.apply(otherFieldCharacters, this.fieldCharactersByArea.get(areaGridString)!)\r\n      }\r\n    })\r\n    return otherFieldCharacters.filter(fieldCharacter2 => fieldCharacter2 !== fieldCharacter)\r\n  }\r\n  private getCollisionsByAreaGrid(areaGrid: Array<number>): Array<Collosion> {\r\n    const collisions: Array<Collosion> = []\r\n    const areaGridStrings = [\r\n      areaGrid.toString(),\r\n      [areaGrid[0] - 1, areaGrid[1]].toString(),\r\n      [areaGrid[0] - 1, areaGrid[1] - 1].toString(),\r\n      [areaGrid[0], areaGrid[1] - 1].toString(),\r\n      [areaGrid[0] + 1, areaGrid[1] - 1].toString(),\r\n      [areaGrid[0] + 1, areaGrid[1]].toString(),\r\n      [areaGrid[0] + 1, areaGrid[1] + 1].toString(),\r\n      [areaGrid[0], areaGrid[1] + 1].toString(),\r\n      [areaGrid[0] - 1, areaGrid[1] + 1].toString()\r\n    ]\r\n    areaGridStrings.forEach(areaGridString => {\r\n      if (this.collisionsByArea.has(areaGridString)) {\r\n        Array.prototype.push.apply(collisions, this.collisionsByArea.get(areaGridString)!)\r\n      }\r\n    })\r\n    return collisions\r\n  }\r\n  private addFieldCharacterToArea(fieldCharacter: FieldCharacter, areaGridX: number, areaGridY: number) {\r\n    const areaGridString = [areaGridX, areaGridY].toString()\r\n    if (this.fieldCharactersByArea.has(areaGridString)) {\r\n      this.fieldCharactersByArea.get(areaGridString)!.push(fieldCharacter)\r\n    } else {\r\n      this.fieldCharactersByArea.set(areaGridString, [fieldCharacter])\r\n    }\r\n  }\r\n  private removeFieldCharacterFromArea(fieldCharacter: FieldCharacter, areaGridX: number, areaGridY: number) {\r\n    const areaGridString = [areaGridX, areaGridY].toString()\r\n    const fieldCharacters = this.fieldCharactersByArea.get(areaGridString)!\r\n    this.fieldCharactersByArea.set(areaGridString, fieldCharacters.filter(fieldCharacter2 => fieldCharacter2 !== fieldCharacter))\r\n  }\r\n  private gridToAreaGrid(gridX: number, gridY: number) {\r\n    return [Math.floor(gridX / AREA_DIVIDE_GRID_NUM), Math.floor(gridY / AREA_DIVIDE_GRID_NUM)]\r\n  }\r\n  private positionToAreaGrid(x: number, y: number) {\r\n    return [Math.floor(x / (AREA_DIVIDE_GRID_NUM * this.mapData.tilewidth)), Math.floor(y / (AREA_DIVIDE_GRID_NUM * this.mapData.tileheight))]\r\n  }\r\n  public setDebugMode(flag: boolean) {\r\n    this.debugLayerContainer.visible = flag\r\n  }\r\n  // 視界内のキャラクター一覧取得\r\n  private getInSightFieldCharacters(): Array<FieldCharacter> {\r\n    const fieldCharacters: Array<FieldCharacter> = []\r\n    for (let areaGridY = this.inSightArea.top; areaGridY <= this.inSightArea.bottom; ++areaGridY) {\r\n      for (let areaGridX = this.inSightArea.left; areaGridX <= this.inSightArea.right; ++areaGridX) {\r\n        const areaGridString = [areaGridX, areaGridY].toString()\r\n        if (this.fieldCharactersByArea.has(areaGridString)) {\r\n          Array.prototype.push.apply(fieldCharacters, this.fieldCharactersByArea.get(areaGridString)!)\r\n        }\r\n      }\r\n    }\r\n    return fieldCharacters\r\n  }\r\n  private updateInSightArea() {\r\n    this.inSightArea.x = Math.max(0, -Math.floor(this.x / (AREA_DIVIDE_GRID_NUM * this.mapData.tilewidth)) - 2)\r\n    this.inSightArea.y = Math.max(0, -Math.floor(this.y / (AREA_DIVIDE_GRID_NUM * this.mapData.tileheight)) - 2)\r\n  }\r\n  private isInSight(fieldCharacter: FieldCharacter): boolean {\r\n    return fieldCharacter.areaGridX >= this.inSightArea.left && fieldCharacter.areaGridX <= this.inSightArea.right && fieldCharacter.areaGridY >= this.inSightArea.top && fieldCharacter.areaGridY <= this.inSightArea.bottom \r\n  }\r\n  private updateCharacterVisibilityByMovedAreaOffset(movedAreaX: number, movedAreaY: number) {\r\n    if (movedAreaX !== 0) {\r\n      // 横方向で視界内になったキャラを表示\r\n      {\r\n        let startX = movedAreaX > 0 ? (this.inSightArea.right - movedAreaX) : this.inSightArea.left\r\n        let endX = movedAreaX > 0 ? this.inSightArea.right : (this.inSightArea.left - movedAreaX)\r\n        for (let areaX = startX; areaX <= endX; ++areaX) {\r\n          for (let areaY = this.inSightArea.top; areaY <= this.inSightArea.bottom; ++areaY) {\r\n            const areaGridString = [areaX, areaY].toString()\r\n            if (this.fieldCharactersByArea.has(areaGridString)) {\r\n              this.fieldCharactersByArea.get(areaGridString)!.forEach(fieldCharacter => {\r\n                if (!fieldCharacter.isAdded) {\r\n                  this.layerContainer.addChild(fieldCharacter.character.shadowSprite)\r\n                  this.layerContainer.addChild(fieldCharacter.character.bodySprite)\r\n                  fieldCharacter.isAdded = true\r\n                }\r\n              })\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // 横方向で視界外になったキャラを非表示\r\n      {\r\n        let startX = movedAreaX > 0 ? (this.inSightArea.left - movedAreaX) : this.inSightArea.right\r\n        let endX = movedAreaX > 0 ? this.inSightArea.left : (this.inSightArea.right - movedAreaX)\r\n        for (let areaX = startX; areaX <= endX; ++areaX) {\r\n          for (let areaY = this.inSightArea.top; areaY <= this.inSightArea.bottom; ++areaY) {\r\n            const areaGridString = [areaX, areaY].toString()\r\n            if (this.fieldCharactersByArea.has(areaGridString)) {\r\n              this.fieldCharactersByArea.get(areaGridString)!.forEach(fieldCharacter => {\r\n                if (fieldCharacter.isAdded) {\r\n                  this.layerContainer.removeChild(fieldCharacter.character.shadowSprite)\r\n                  this.layerContainer.removeChild(fieldCharacter.character.bodySprite)\r\n                  fieldCharacter.isAdded = false\r\n                }\r\n              })\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (movedAreaY !== 0) {\r\n      // 縦方向で視界内になったキャラを表示\r\n      {\r\n        let startY = movedAreaY > 0 ? (this.inSightArea.bottom - movedAreaY) : this.inSightArea.top\r\n        let endY = movedAreaY > 0 ? this.inSightArea.bottom : (this.inSightArea.top - movedAreaY)\r\n        for (let areaY = startY; areaY <= endY; ++areaY) {\r\n          for (let areaX = this.inSightArea.left; areaX <= this.inSightArea.right; ++areaX) {\r\n            const areaGridString = [areaX, areaY].toString()\r\n            if (this.fieldCharactersByArea.has(areaGridString)) {\r\n              this.fieldCharactersByArea.get(areaGridString)!.forEach(fieldCharacter => {\r\n                if (!fieldCharacter.isAdded) {\r\n                  this.layerContainer.addChild(fieldCharacter.character.shadowSprite)\r\n                  this.layerContainer.addChild(fieldCharacter.character.bodySprite)\r\n                  fieldCharacter.isAdded = true\r\n                }\r\n              })\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // 縦方向で視界外になったキャラを非表示\r\n      {\r\n        let startY = movedAreaY > 0 ? (this.inSightArea.top - movedAreaY) : this.inSightArea.bottom\r\n        let endY = movedAreaY > 0 ? this.inSightArea.top : (this.inSightArea.bottom - movedAreaY)\r\n        for (let areaY = startY; areaY <= endY; ++areaY) {\r\n          for (let areaX = this.inSightArea.left; areaX <= this.inSightArea.right; ++areaX) {\r\n            const areaGridString = [areaX, areaY].toString()\r\n            if (this.fieldCharactersByArea.has(areaGridString)) {\r\n              this.fieldCharactersByArea.get(areaGridString)!.forEach(fieldCharacter => {\r\n                if (fieldCharacter.isAdded) {\r\n                  this.layerContainer.removeChild(fieldCharacter.character.shadowSprite)\r\n                  this.layerContainer.removeChild(fieldCharacter.character.bodySprite)\r\n                  fieldCharacter.isAdded = false\r\n                }\r\n              })\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n// 高速歩きで壁にぶつかった場合、移動しないのではなくx, yについて移動できるところまで戻してあげる。\r\nimport Vue from \"vue\"\r\nimport * as PIXI from \"pixi.js\"\r\nimport { Character, PlayerRoutine, UroUroRoutine } from '@/stages/012/Character'\r\nimport { Field } from '@/stages/012/Field'\r\n\r\nclass FpsCounter {\r\n  private ms = 0\r\n  private counter = 0\r\n  public averageMs = 0\r\n  constructor(private oldNow = performance.now()) {}\r\n  public checkPoint() {\r\n    const now = performance.now()\r\n    this.ms += (now - this.oldNow)\r\n    this.oldNow = now\r\n    ++this.counter\r\n    if (this.counter >= 60) {\r\n      this.averageMs = this.ms / this.counter\r\n      this.counter = 0\r\n      this.ms = 0\r\n    }\r\n  }\r\n}\r\n\r\nexport default Vue.extend({\r\n  data(): {\r\n    pixiApp: PIXI.Application | null;\r\n    field: Field | null;\r\n    pressedKeyCodeSet: Set<number>;\r\n    fpsCounter: FpsCounter;\r\n    npc: Character | null;\r\n    isDebugMode: boolean;\r\n    } {\r\n    return {\r\n      pixiApp: null,\r\n      field: null,\r\n      pressedKeyCodeSet: new Set(),\r\n      fpsCounter: new FpsCounter(),\r\n      npc: null,\r\n      isDebugMode: false\r\n    }\r\n  },\r\n  mounted() {\r\n    PIXI.settings.RESOLUTION = window.devicePixelRatio\r\n    PIXI.settings.SCALE_MODE = PIXI.SCALE_MODES.NEAREST\r\n    // PIXI.settings.TARGET_FPMS = 1\r\n\r\n    window.onkeydown = this.onKeyDown\r\n    window.onkeyup = this.onKeyUp\r\n\r\n    const opt = { \r\n      width: 640,\r\n      height: 480,\r\n      autoDensity: true\r\n    }\r\n    this.pixiApp = new PIXI.Application(opt)\r\n    this.pixiApp.ticker.maxFPS = 60\r\n    this.pixiApp.ticker.minFPS = 60\r\n\r\n    const container = this.$refs[\"pixi_area\"] as any\r\n    container.appendChild(this.pixiApp.view)\r\n\r\n    // 背景色\r\n    const bg = new PIXI.Sprite(PIXI.Texture.WHITE)\r\n    bg.width = 320\r\n    bg.height = 240\r\n    bg.tint = 0xcccccc\r\n    this.pixiApp.stage.addChild(bg)\r\n\r\n    PIXI.utils.clearTextureCache()\r\n    PIXI.Loader.shared\r\n      .reset()\r\n      .add(\"/arpg-sample/images/stages/009/chara01.png\")\r\n      .add(\"/arpg-sample/images/stages/009/chara02.png\")\r\n      .add(\"/arpg-sample/images/stages/012/mapchip.png\")\r\n      .add(\"/arpg-sample/images/stages/012/mapchip.json\")\r\n      .add(\"/arpg-sample/images/stages/012/map01.json\")\r\n      .load(() => {\r\n\r\n        // RenderTextureに必要な画像すべてを描き込む\r\n        const renderTexture = PIXI.RenderTexture.create({ width: 1024, height: 1024 })\r\n        const renderSprite = PIXI.Sprite.from(renderTexture)\r\n\r\n        // mapchipを描き込む\r\n        const spriteMapChip = PIXI.Sprite.from(PIXI.Loader.shared.resources[\"/arpg-sample/images/stages/012/mapchip.png\"].texture)\r\n        this.pixiApp!.renderer.render(spriteMapChip, renderTexture, false)\r\n        // chara01を書き込む\r\n        const sprite01 = PIXI.Sprite.from(PIXI.Loader.shared.resources[\"/arpg-sample/images/stages/009/chara01.png\"].texture)\r\n        sprite01.position.set(256, 0)\r\n        this.pixiApp!.renderer.render(sprite01, renderTexture, false)\r\n        // chara02を書き込む\r\n        const sprite02 = PIXI.Sprite.from(PIXI.Loader.shared.resources[\"/arpg-sample/images/stages/009/chara02.png\"].texture)\r\n        sprite02.position.set(256 + 192, 0)\r\n        this.pixiApp!.renderer.render(sprite02, renderTexture, false)\r\n\r\n\r\n        // フィールド\r\n        this.field = new Field(\r\n          renderTexture,\r\n          PIXI.Loader.shared.resources[\"/arpg-sample/images/stages/012/mapchip.json\"].data,\r\n          PIXI.Loader.shared.resources[\"/arpg-sample/images/stages/012/map01.json\"].data)\r\n        this.pixiApp!.stage.addChild(this.field)\r\n\r\n        // プレイヤー\r\n        const chara1 = new Character(renderTexture, new PIXI.Point(256, 0), new PlayerRoutine(this.pressedKeyCodeSet))\r\n        chara1.x = 200\r\n        chara1.y = 120\r\n        this.field.addCharacter(chara1, true)\r\n\r\n        // NPC\r\n        for (let i = 0; i < 1000; ++i) {\r\n          const npc = new Character(renderTexture, new PIXI.Point(256 + 192, 0), new UroUroRoutine())\r\n          npc.currentDirection = 4\r\n          this.field.addCharacter(npc)\r\n          for(;;) {\r\n            npc.x = 32 + 16 * Math.floor(Math.random() * (this.field!.horizontalGridNum - 4))\r\n            npc.y = 32 + 16 * Math.floor(Math.random() * (this.field!.verticalGridNum - 4))\r\n            npc.update()\r\n            const [hit, x, y] = this.field.hitWall(npc, 0, 0)\r\n            if (!hit) {\r\n              break;\r\n            } else {\r\n              console.log(hit)\r\n            }\r\n          }\r\n        }\r\n      })\r\n\r\n    // メインループ\r\n    this.pixiApp.ticker.add(this.update)\r\n  },\r\n  methods: {\r\n    onKeyDown(event: KeyboardEvent) {\r\n      this.pressedKeyCodeSet.add(event.keyCode)\r\n    },\r\n    onKeyUp(event: any) {\r\n      this.pressedKeyCodeSet.delete(event.keyCode)\r\n    },\r\n    update(delta: number) {\r\n      this.fpsCounter.checkPoint()\r\n      if (this.field != null) {\r\n        this.field.update()\r\n      }\r\n    },\r\n    onClickToggleDebugMode() {\r\n      this.isDebugMode = !this.isDebugMode\r\n      this.field!.setDebugMode(this.isDebugMode)\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    // this.pixiApp!.ticker.remove(this.update)\r\n    this.pixiApp!.destroy(true)\r\n  },\r\n  components: {},\r\n  computed: {},\r\n  props: []\r\n})\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??ref--13-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./View.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/ts-loader/index.js??ref--13-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./View.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./View.vue?vue&type=template&id=eb93f37e&scoped=true&\"\nimport script from \"./View.vue?vue&type=script&lang=ts&\"\nexport * from \"./View.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./View.vue?vue&type=style&index=0&id=eb93f37e&scoped=true&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"eb93f37e\",\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}